generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Activity {
  id        String       @id
  type      ActivityType
  since     String
  friendId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime
  Friends   Friends      @relation(fields: [friendId], references: [id], onDelete: Cascade)
}

model Channel {
  id        String      @id
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  serverId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime
  Profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  Message   Message[]

  @@index([profileId])
  @@index([serverId])
}

model Conversation {
  id                                      String          @id
  UserOneId                               String
  UserTwoId                               String
  Profile_Conversation_UserOneIdToProfile Profile         @relation("Conversation_UserOneIdToProfile", fields: [UserOneId], references: [id], onDelete: Cascade)
  Profile_Conversation_UserTwoIdToProfile Profile         @relation("Conversation_UserTwoIdToProfile", fields: [UserTwoId], references: [id], onDelete: Cascade)
  DirectMessage                           DirectMessage[]

  @@unique([UserOneId, UserTwoId])
  @@index([UserTwoId])
}

model DirectMessage {
  id             String       @id
  content        String
  fileUrl        String?
  friendId       String
  conversationId String
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  Profile        Profile      @relation(fields: [friendId], references: [id], onDelete: Cascade)

  @@index([friendId, conversationId])
}

model FriendRequets {
  id                                        String              @id
  senderId                                  String
  receiverId                                String
  status                                    FriendRequetsStatus
  Profile_FriendRequets_receiverIdToProfile Profile             @relation("FriendRequets_receiverIdToProfile", fields: [receiverId], references: [id])
  Profile_FriendRequets_senderIdToProfile   Profile             @relation("FriendRequets_senderIdToProfile", fields: [senderId], references: [id])
}

model Friends {
  id                                 String     @id
  status                             UserStatus
  type                               FriendType
  profileId                          String
  friendId                           String
  createdAt                          DateTime   @default(now())
  updatedAt                          DateTime
  Activity                           Activity[]
  Profile_Friends_friendIdToProfile  Profile    @relation("Friends_friendIdToProfile", fields: [friendId], references: [id])
  Profile_Friends_profileIdToProfile Profile    @relation("Friends_profileIdToProfile", fields: [profileId], references: [id])
}

model Member {
  id        String     @id
  role      MemberRole @default(GUEST)
  profileId String
  serverId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime
  Profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  Message   Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id
  content   String
  fileUrl   String?
  memberId  String
  channelId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  Member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([channelId, memberId])
}

model Notification {
  id        String           @id
  type      NotificationTyoe
  content   String
  read      Boolean          @default(false)
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime
  Profile   Profile          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id                                              String          @id
  userId                                          String          @unique
  name                                            String
  email                                           String          @unique
  username                                        String          @unique
  imageUrl                                        String?
  createdAt                                       DateTime        @default(now())
  updatedAt                                       DateTime
  status                                          ProfileStatus   @default(Online)
  Channel                                         Channel[]
  Conversation_Conversation_UserOneIdToProfile    Conversation[]  @relation("Conversation_UserOneIdToProfile")
  Conversation_Conversation_UserTwoIdToProfile    Conversation[]  @relation("Conversation_UserTwoIdToProfile")
  DirectMessage                                   DirectMessage[]
  FriendRequets_FriendRequets_receiverIdToProfile FriendRequets[] @relation("FriendRequets_receiverIdToProfile")
  FriendRequets_FriendRequets_senderIdToProfile   FriendRequets[] @relation("FriendRequets_senderIdToProfile")
  Friends_Friends_friendIdToProfile               Friends[]       @relation("Friends_friendIdToProfile")
  Friends_Friends_profileIdToProfile              Friends[]       @relation("Friends_profileIdToProfile")
  Member                                          Member[]
  Notification                                    Notification[]
  User                                            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Server                                          Server[]
}

model Server {
  id         String    @id
  name       String
  imageUrl   String
  inviteCode String    @unique
  profileId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  Channel    Channel[]
  Member     Member[]
  Profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String    @unique
  username      String    @unique
  dateOfBirth   String
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Account       Account[]
  Profile       Profile?
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum ActivityType {
  Playing
  Streaming
  Listening
  Watching
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

enum FriendRequetsStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum FriendType {
  User
  Bot
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum NotificationTyoe {
  MESSAGE
  FRIEND_REQUEST
}

enum ProfileStatus {
  Invisible
  Online
  Offline
}

enum UserStatus {
  Online
  Idle
  DND
  Offline
  Mobile
  Blocked
}
