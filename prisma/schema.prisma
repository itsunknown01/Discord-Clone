datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  username      String    @unique
  dateOfBirth   String
  emailVerified DateTime?
  image         String?
  password      String

  accounts Account[]
  Profile  Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum ProfileStatus {
  Invisible
  Online
  Offline
}

model Profile {
  id       String        @id @default(uuid())
  userId   String        @unique
  name     String
  email    String        @unique
  username String        @unique
  imageUrl String?
  status   ProfileStatus @default(Offline)

  members              Member[]
  servers              Server[]
  categories  Category[]
  channels             Channel[]
  directMessages       DirectMessage[]
  FromProfile          Notification[]  @relation("FromProfile")
  ToProfile            Notification[]  @relation("ToProfile")
  friends              Friends[]       @relation("Friends")
  friendsOf            Friends[]       @relation("FriendsOf")
  sentRequests         FriendRequets[] @relation("SentRequests")
  receiveRequests      FriendRequets[] @relation("ReceivedRequests")
  conversationstared   Conversation[]  @relation("UserOne")
  conversationreceived Conversation[]  @relation("UserTwo")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  categories  Category[]
  channels Channel[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Category {
  id   String @id @default(uuid())
  name String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([profileId])
  @@index([serverId])
}

enum ActivityType {
  Playing
  Streaming
  Listening
  Watching
}

model Activity {
  id    String       @id @default(uuid())
  type  ActivityType
  since String

  friendId String
  friend   Friends @relation(fields: [friendId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  Online
  Idle
  DND
  Offline
  Mobile
  Blocked
}

enum FriendType {
  User
  Bot
}

model Friends {
  id       String     @id @default(uuid())
  status   UserStatus
  type     FriendType
  activity Activity[]

  profileId String
  friendId  String

  profile Profile @relation("Friends", fields: [profileId], references: [id])
  friend  Profile @relation("FriendsOf", fields: [friendId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FriendRequetsStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequets {
  id         String              @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequetsStatus

  sender   Profile @relation("SentRequests", fields: [senderId], references: [id])
  receiver Profile @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId, memberId])
}

model DirectMessage {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  friendId String
  friend   Profile @relation(fields: [friendId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([friendId, conversationId])
}

model Conversation {
  id String @id @default(uuid())

  UserOneId String
  UserOne   Profile @relation("UserOne", fields: [UserOneId], references: [id], onDelete: Cascade)

  UserTwoId String
  UserTwo   Profile @relation("UserTwo", fields: [UserTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([UserOneId, UserTwoId])
  @@index([UserTwoId])
}

enum NotificationTyoe {
  MESSAGE
  FRIEND_REQUEST
}

model Notification {
  id      String           @id @default(uuid())
  type    NotificationTyoe
  content String
  read    Boolean          @default(false)

  fromId   String
  fromUser Profile @relation("FromProfile", fields: [fromId], references: [id], onDelete: Cascade)

  toId   String
  toUser Profile @relation("ToProfile", fields: [toId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}